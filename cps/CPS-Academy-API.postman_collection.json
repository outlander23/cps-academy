{
  "info": {
    "name": "CPS Academy API",
    "description": "Comprehensive Postman collection for CPS Academy authentication and course endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:4000",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "courseId",
      "value": "",
      "type": "string"
    },
    {
      "key": "restrictedCourseId",
      "value": "000000000000000000000000",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "description": "Registration and login scenarios for all roles",
      "item": [
        {
          "name": "Register (dynamic email)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test User\",\n  \"email\": \"user{{$timestamp}}@cpsacademy.com\",\n  \"password\": \"Password123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "pm.test(\"Register returns token and user\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.collectionVariables.set('authToken', jsonData.token);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Register (duplicate email)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Existing User\",\n  \"email\": \"welcome@cpsacademy.com\",\n  \"password\": \"Password123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 409\", function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "pm.test(\"Conflict returns message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message.toLowerCase()).to.include('email');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Register (missing fields)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"newuser@cpsacademy.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "pm.test(\"Validation error message present\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login (normal role)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"welcome@cpsacademy.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Login stores auth token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "    pm.collectionVariables.set('authToken', jsonData.token);",
                  "});",
                  "pm.test(\"User payload includes role\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user.role).to.eql('normal');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login (student role)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"student@cpsacademy.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Student login stores token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.collectionVariables.set('authToken', jsonData.token);",
                  "});",
                  "pm.test(\"Student role returned\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user.role).to.eql('student');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login (social-manager role)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"smm@cpsacademy.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Social manager login stores token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.collectionVariables.set('authToken', jsonData.token);",
                  "});",
                  "pm.test(\"Social manager role returned\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user.role).to.eql('social-manager');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login (developer role)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"dev@cpsacademy.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Developer login stores token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.collectionVariables.set('authToken', jsonData.token);",
                  "});",
                  "pm.test(\"Developer role returned\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user.role).to.eql('developer');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login (missing fields)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "pm.test(\"Missing credential message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login (invalid credentials)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid@example.com\",\n  \"password\": \"wrong\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "pm.test(\"Invalid login returns message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Clear auth token",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": ["pm.collectionVariables.unset('authToken');"]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Token cleared\", function () {",
                  "    pm.expect(pm.collectionVariables.get('authToken')).to.be.undefined;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Courses",
      "description": "Course access flows across roles",
      "item": [
        {
          "name": "List courses",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/courses",
              "host": ["{{baseUrl}}"],
              "path": ["api", "courses"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Courses array present\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.courses).to.be.an('array');",
                  "});",
                  "pm.test(\"Stored course references for detail checks\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.courses.length) {",
                  "        const firstCourse = jsonData.courses[0];",
                  "        pm.expect(firstCourse).to.have.property('id');",
                  "        pm.expect(firstCourse).to.have.property('slug');",
                  "        pm.collectionVariables.set('courseId', firstCourse.id);",
                  "        pm.collectionVariables.set('courseSlug', firstCourse.slug);",
                  "    } else {",
                  "        pm.collectionVariables.unset('courseId');",
                  "        pm.collectionVariables.unset('courseSlug');",
                  "    }",
                  "});",
                  "pm.test(\"Course objects include audience\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.courses.length) {",
                  "        pm.expect(jsonData.courses[0]).to.have.property('audience');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get course detail (authorized)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/courses/{{courseId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "courses", "{{courseId}}"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const courseId = pm.collectionVariables.get('courseId');",
                  "if (!courseId) {",
                  "    throw new Error('courseId collection variable is not set. Run \"List courses\" after logging in.');",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Course object returned', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('course');",
                  "    pm.expect(jsonData.course).to.have.property('modules');",
                  "});",
                  "pm.test('Modules contain classes', function () {",
                  "    const jsonData = pm.response.json();",
                  "    jsonData.course.modules.forEach(function (module) {",
                  "        pm.expect(module.classes).to.be.an('array');",
                  "    });",
                  "});",
                  "pm.test('Returned course matches stored id', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const storedId = pm.collectionVariables.get('courseId');",
                  "    if (storedId) {",
                  "        pm.expect(jsonData.course.id).to.eql(storedId);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get course detail (by slug)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/courses/{{courseSlug}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "courses", "{{courseSlug}}"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const courseSlug = pm.collectionVariables.get('courseSlug');",
                  "if (!courseSlug) {",
                  "    throw new Error('courseSlug collection variable is not set. Run \"List courses\" after logging in.');",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Course object returned', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('course');",
                  "    pm.expect(jsonData.course).to.have.property('slug');",
                  "});",
                  "pm.test('Slug matches stored reference', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const storedSlug = pm.collectionVariables.get('courseSlug');",
                  "    if (storedSlug) {",
                  "        pm.expect(jsonData.course.slug).to.eql(storedSlug);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get course detail (missing token)",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/courses/{{courseId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "courses", "{{courseId}}"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const courseId = pm.collectionVariables.get('courseId');",
                  "if (!courseId) {",
                  "    throw new Error('courseId collection variable is not set. Run \"List courses\" after an authenticated login.');",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "pm.test('Unauthorized message returned', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message.toLowerCase()).to.include('token');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get course detail (not found)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/courses/000000000000000000000000",
              "host": ["{{baseUrl}}"],
              "path": ["api", "courses", "000000000000000000000000"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "pm.test('Meaningful not found message returned', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message.toLowerCase()).to.include('not found');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create course (developer only)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Design Systems Mastery\",\n  \"description\": \"Build scalable component libraries and governance workflows.\",\n  \"audience\": [\"developer\"],\n  \"modules\": [\n    {\n      \"title\": \"Design Tokens Kickoff\",\n      \"topics\": [\"Token Types\", \"Automation\"],\n      \"classes\": [\n        {\n          \"title\": \"Tokens in Practice\",\n          \"duration\": 45,\n          \"recordingUrl\": \"https://www.youtube.com/watch?v=fZ2JKUy1jwg\"\n        }\n      ]\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/courses",
              "host": ["{{baseUrl}}"],
              "path": ["api", "courses"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const token = pm.collectionVariables.get('authToken');",
                  "if (!token) {",
                  "    throw new Error('Login as the developer user before creating a course.');",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "pm.test('Created course returned with slug', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('course');",
                  "    pm.expect(jsonData.course).to.have.property('slug');",
                  "    pm.collectionVariables.set('managedCourseId', jsonData.course.id);",
                  "    pm.collectionVariables.set('managedCourseSlug', jsonData.course.slug);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update course (developer only)",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Updated description highlighting governance best practices.\",\n  \"modules\": [\n    {\n      \"title\": \"Design Tokens Kickoff\",\n      \"topics\": [\"Token Types\", \"Automation\", \"Accessibility\"],\n      \"classes\": [\n        {\n          \"title\": \"Tokens in Practice\",\n          \"duration\": 45,\n          \"recordingUrl\": \"https://www.youtube.com/watch?v=fZ2JKUy1jwg\"\n        },\n        {\n          \"title\": \"Governance Roundtable\",\n          \"duration\": 38,\n          \"recordingUrl\": \"https://www.youtube.com/watch?v=g8G7rmV0XEE\"\n        }\n      ]\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/courses/{{managedCourseSlug}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "courses", "{{managedCourseSlug}}"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const slug = pm.collectionVariables.get('managedCourseSlug');",
                  "if (!slug) {",
                  "    throw new Error('managedCourseSlug is not set. Run \"Create course (developer only)\" first.');",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Updated course returned', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('course');",
                  "    pm.expect(jsonData.course.modules[0].topics).to.include('Accessibility');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete course (developer only)",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/courses/{{managedCourseSlug}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "courses", "{{managedCourseSlug}}"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const slug = pm.collectionVariables.get('managedCourseSlug');",
                  "if (!slug) {",
                  "    throw new Error('managedCourseSlug is not set. Run \"Create course (developer only)\" first.');",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "pm.test('Managed course references cleared', function () {",
                  "    pm.collectionVariables.unset('managedCourseId');",
                  "    pm.collectionVariables.unset('managedCourseSlug');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "List courses (missing token)",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/courses",
              "host": ["{{baseUrl}}"],
              "path": ["api", "courses"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "pm.test('Unauthorized message present', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message.toLowerCase()).to.include('token');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
